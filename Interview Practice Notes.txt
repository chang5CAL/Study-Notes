KMP: When looking for most matching strings in a nested for loop, move the 

Anagrams: To find if an object is an anagram, simply put all characters in to a 26(27 for space) array, and
sort it. Repeat to the compared object, then check if they are the same.
Alternatively, only do that to one, and subtract one from the array, returning false if the value at the area
is 0 pre-calculation, and true if you are finished and all elements are 0.
Of course, always make sure they're the same length.
Another way is to put all characters in a vector and then sort it.

Note: Copy by hand if answer is not found in one hour.

This anagram problem frustrates me. I get what to do, take everything, sort as vector, compare vectors,
if it's the same (Which, if they're anagrams, they will be), store that and if not done already, store the
initial string.

Also of note, don't use Lintcode's IDE, use your own, because bugtesting is a major pain when you can't
cout anything.

Note: Looks like there's not much problem with simply throwing an "In case of edge case (Like a "" string) if
statement", if there aren't too many edge cases that have this problem. If there are, you may need to
reevaluate your algorithm.

Looks like there's actually a substring function (And if not, not hard to write one), which would have 
helped my append string function (Just make something a substring). There's no guarenteed way to avoid 
analyzing everything (Barring a ""), so it will always be O(nm).

Remove Element: Simple enough, just run a for loop through the array, check if it's the element, remove it
if so, move up one if not. The biggest catch is if you forget it adjusts as you go, so you'll go 1, remove 1,
2, which was 3, and not check the actual second element.

Sub Array Sum: Looks like a nested for loop will do the job. Not terribly efficient, so I'll want to look up
the anctual answer.

My solution is basically a for loop that started at the beginning, then a second one that went from there to the
end. If at any point, the sum of parts equal 0, return the two points, else move the first one up and
move the second until the end, and so on. This tests every adjacent combination.

Remove Duplicates from sorted: If it's not already sorted, sort it! Because that makes this way easier.
Start at 1, so you can just look backwards one, if it exists. If it doesn't, then you have a single vector
and can't backtrack, so you can't have duplicates. Done. If it does, then you can look back, and if it
matches, just delete the value, otherwise, move forward by one. Same as remove element.

Merge Sorted Arrays: The give away is kind of in the name. It's basically the second half of a mergesort,
assembling two different sorted arrays, so all you need to do is measure via merge sort.

Multiply all excluding self: All I need to do is make a temp array/vector, and fill it up with multiplication
from all other values except the current position, and then return the finished array. There might be a shortcut
if you just make it check for two 0's, or at least just one 0, where it will ignore every value (Just autofill
with 0) except for the 0, or just make an entire vector of 0's if there's two 0's. Don't forget to make it 
push_back a 1 to start with, so it has something to work with!

First Missing Positive: First, sort the vector. Then make a for loop, starting at the first value, going up
until the i value doesn't match the vector's value at that position. Then just return i. Remove all but one
non-unique value. Oh, here's the problem: this problem treats 0 oddly. 0 can not exist for all this problem
cares. The way I did it was by sorting it, erasing the first item until it's positive, removing uniques and
other non-positives (This code requires it to start at 1, so the initial part was removing edge cases), then
making a continuous count until it hit either the end or a missing spot.

Sum of 3 Closest: Need 3 for loops. Basically, first stands on the 0th position, second on 1, third on 2.
Move third until it hits the last one, then do the second to the second to last, and third to third to last,
finding the sum of all and keeping track of the nearest (Via comparing abs(target-top) vs. abs(target-current)),
UNLESS the comparison is 0. Note that I set the first max to an unreasonably high number so I can do comparisons,
though I could just set it to the first element to be scanned and just go from there.
Assumes there is at least 3 elements.

2 Sum: Shouldn't be too hard. Have two for loops, one starts at 0, the other at i+1 (i being the first index),
and keep going until it finds a match. Once it does, put both index(+1) in a vector and return that vector.

Sum of 3: Do the same as sum of 3 closest, but store the 3 if it's a 0, only. And go through the whole thing 
every time, storing each. Since it's a vector of vectors, you need to store the 3 numbers in to a vector first,
then store that vector in the vector that's returned.

Also of note: When doing this problem, apparently -1,1,0 does NOT equal -1,0,1. Another problem
is checking for uniqueness. So what I need to do is make sure that 1) The values are in sorted order, 2) make 
sure the vector hasn't been used yet. To do this, first, insert all values as usual, then just sort it. Then
check that vector with all vectors in the vector of vectors, on a 0 to 0, 1 to 1 and 2 to 2 (Which is fine since
you put them there to begin with), and if they are not the exact same (They have to equal 0 to get to this point)
add it in.

Partition Array: Not sure what I'm supposed to be doing here? From what I get, sort the array, then return the
value for which the value at i is less than k. This is a simple task (Just sort it via vector's sort), though
there's one oddity: It seems if there's way too many values, the program's sort doesn't work. I just
made an "In case of over 1000 return size" if, but that's sloppy. On the other hand, this is more the fault
of lint code's compiler, since larger numbers just crash it.

===============================
Main lesson for part 2: Sorting is good. So is making a list only unique. For loops are also helpful. Same mostly
applies for part 1, but also KMP.
===============================

Sqrt(x): My initial attempt was to take a number, multiply by itself once, then add one to it if it's not greater
than the target. This would work, except it's too slow for when the value is too high. My next solution will
be to divide a number, starting at x, by 2, until it's square is less than x, then start adding one to it until
it's as high as it'll get.

Search Insert Position: Shouldn't be too different from first missing. Just need to find the value closest to 
it, then if it's larger or smaller and place it as such. Storing everything in a binary tree would probably
be much simpler, but that's a bit too much effort unless binary trees already exist and have an easy
insertion method.

Search a 2D Matrix: my first instinct for this is to look through the first element of each row, until
I find a matrix that's first element is greater than x. Then look at the one before it (Unless it's the first,
then return whatever it is that means the number isn't there). Then just brute force look through the array
(There might be a faster way for this. Maybe check which end is closer, since it's already sorted.)

First Position: O(log(n)) might be a bit difficult here. It might be easier to stick everything in a binary
tree, with the middle(Ish) value as the root)